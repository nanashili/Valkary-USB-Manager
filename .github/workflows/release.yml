name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'v0.1.0'

# Ensure only one release workflow runs at a time
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - target: x86_64-linux
            os: ubuntu-latest
            zig_target: x86_64-linux
            artifact_name: usb-daemon
            archive_name: usb-daemon-linux-x86_64.tar.gz
          - target: aarch64-linux
            os: ubuntu-latest
            zig_target: aarch64-linux
            artifact_name: usb-daemon
            archive_name: usb-daemon-linux-aarch64.tar.gz
          
          # Windows builds
          - target: x86_64-windows
            os: ubuntu-latest
            zig_target: x86_64-windows
            artifact_name: usb-daemon.exe
            archive_name: usb-daemon-windows-x86_64.zip
          - target: aarch64-windows
            os: ubuntu-latest
            zig_target: aarch64-windows
            artifact_name: usb-daemon.exe
            archive_name: usb-daemon-windows-aarch64.zip
          
          # macOS native build (only on macOS runner for proper linking)
          - target: macos-native
            os: macos-latest
            zig_target: native
            artifact_name: usb-daemon
            archive_name: usb-daemon-macos-native.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.15.1

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev

    - name: Build for ${{ matrix.target }}
      run: |
        if [ "${{ matrix.target }}" = "macos-native" ]; then
          # Build native macOS binary with proper framework linking
          zig build -Doptimize=ReleaseFast
          mkdir -p release/macos-native
          cp zig-out/bin/usb-daemon release/macos-native/usb-daemon
        else
          # Cross-compile for other targets
          zig build cross -Doptimize=ReleaseFast
          mkdir -p release/${{ matrix.target }}
          if [ "${{ matrix.target }}" = "x86_64-windows" ]; then
            cp zig-out/bin/usb-daemon-x86_64-windows.exe release/${{ matrix.target }}/usb-daemon.exe
          elif [ "${{ matrix.target }}" = "aarch64-windows" ]; then
            cp zig-out/bin/usb-daemon-aarch64-windows.exe release/${{ matrix.target }}/usb-daemon.exe
          elif [ "${{ matrix.target }}" = "x86_64-linux" ]; then
            cp zig-out/bin/usb-daemon-x86_64-linux release/${{ matrix.target }}/usb-daemon
            chmod +x release/${{ matrix.target }}/usb-daemon
          elif [ "${{ matrix.target }}" = "aarch64-linux" ]; then
            cp zig-out/bin/usb-daemon-aarch64-linux release/${{ matrix.target }}/usb-daemon
            chmod +x release/${{ matrix.target }}/usb-daemon
          fi
        fi

    - name: Generate checksums
      run: |
        cd release/${{ matrix.target }}
        if command -v sha256sum >/dev/null 2>&1; then
          sha256sum * > SHA256SUMS
        else
          shasum -a 256 * > SHA256SUMS
        fi

    - name: Create archive
      run: |
        cd release
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          zip -r ${{ matrix.archive_name }} ${{ matrix.target }}/
        else
          tar -czf ${{ matrix.archive_name }} ${{ matrix.target }}/
        fi

    - name: Generate archive checksum
      id: checksum
      run: |
        cd release
        if command -v sha256sum >/dev/null 2>&1; then
          echo "checksum=$(sha256sum ${{ matrix.archive_name }} | awk '{print $1}')" >> $GITHUB_OUTPUT
        else
          echo "checksum=$(shasum -a 256 ${{ matrix.archive_name }} | awk '{print $1}')" >> $GITHUB_OUTPUT
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-build
        path: release/${{ matrix.archive_name }}
        retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;
        ls -lh release-assets/

    - name: Generate checksums file
      run: |
        cd release-assets
        sha256sum * > SHA256SUMS
        cat SHA256SUMS

    - name: Get tag name
      id: tag_name
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "changelog=Manual release triggered" >> $GITHUB_OUTPUT
        else
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_name.outputs.tag_name }}
        name: USB Device Manager ${{ steps.tag_name.outputs.tag_name }}
        body: |
          ## USB Device Manager Release ${{ steps.tag_name.outputs.tag_name }}
          
          Cross-platform USB device monitoring daemon.
          
          ### Supported Platforms
          - **Linux**: x86_64, ARM64
          - **Windows**: x86_64, ARM64  
          - **macOS**: Intel and Apple Silicon
          
          ### Installation
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Run `./usb-daemon --help` for usage information
          
          ### Verification
          Verify your download using the SHA256SUMS file:
          ```bash
          sha256sum -c SHA256SUMS
          ```
          
          ### Changes
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(steps.tag_name.outputs.tag_name, 'alpha') || contains(steps.tag_name.outputs.tag_name, 'beta') || contains(steps.tag_name.outputs.tag_name, 'rc') }}
        files: |
          release-assets/*
        fail_on_unmatched_files: true